diff --git a/node_modules/react-native-gifted-chat/lib/Bubble.js b/node_modules/react-native-gifted-chat/lib/Bubble.js
index 70b74ae..a8fc8fa 100644
--- a/node_modules/react-native-gifted-chat/lib/Bubble.js
+++ b/node_modules/react-native-gifted-chat/lib/Bubble.js
@@ -19,7 +19,7 @@ const styles = {
         wrapper: {
             borderRadius: 15,
             backgroundColor: Color.leftBubbleBackground,
-            marginRight: 60,
+            // marginRight: 60,
             minHeight: 20,
             justifyContent: 'flex-end',
         },
@@ -42,15 +42,15 @@ const styles = {
         wrapper: {
             borderRadius: 15,
             backgroundColor: Color.defaultBlue,
-            marginLeft: 60,
+            marginLeft: 45,
             minHeight: 20,
             justifyContent: 'flex-end',
         },
         containerToNext: {
-            borderBottomRightRadius: 3,
+            borderBottomRightRadius: 1,
         },
         containerToPrevious: {
-            borderTopRightRadius: 3,
+            borderTopRightRadius: 1,
         },
         bottom: {
             flexDirection: 'row',
@@ -68,7 +68,7 @@ const styles = {
             marginRight: 10,
         },
         username: {
-            top: -3,
+            // top: -3,
             left: 0,
             fontSize: 12,
             backgroundColor: 'transparent',
@@ -76,7 +76,7 @@ const styles = {
         },
         usernameView: {
             flexDirection: 'row',
-            marginHorizontal: 10,
+            // marginHorizontal: 10,
         },
     }),
 };
@@ -114,6 +114,31 @@ export default class Bubble extends React.Component {
                 });
             }
         };
+        this.onPress = () => {
+            const { currentMessage } = this.props;
+            if (this.props.onPress) {
+                this.props.onPress(this.context, this.props.currentMessage);
+            }
+            else if (currentMessage && currentMessage.text) {
+                const { optionTitles } = this.props;
+                const options = optionTitles && optionTitles.length > 0
+                    ? optionTitles.slice(0, 2)
+                    : DEFAULT_OPTION_TITLES;
+                const cancelButtonIndex = options.length - 1;
+                this.context.actionSheet().showActionSheetWithOptions({
+                    options,
+                    cancelButtonIndex,
+                }, (buttonIndex) => {
+                    switch (buttonIndex) {
+                        case 0:
+                            Clipboard.setString(currentMessage.text);
+                            break;
+                        default:
+                            break;
+                    }
+                });
+            }
+        };
     }
     styledBubbleToNext() {
         const { currentMessage, nextMessage, position, containerToNextStyle, } = this.props;
@@ -226,14 +251,11 @@ export default class Bubble extends React.Component {
         return null;
     }
     renderUsername() {
-        const { currentMessage, user, renderUsername } = this.props;
+        const { currentMessage, user } = this.props;
         if (this.props.renderUsernameOnMessage && currentMessage) {
             if (user && currentMessage.user._id === user._id) {
                 return null;
             }
-            if (renderUsername) {
-                return renderUsername(currentMessage.user);
-            }
             return (<View style={styles.content.usernameView}>
           <Text style={[styles.content.username, this.props.usernameStyle]}>
             ~ {currentMessage.user.name}
@@ -242,6 +264,34 @@ export default class Bubble extends React.Component {
         }
         return null;
     }
+    renderStatus() {
+        const { currentMessage, user } = this.props;
+        if (this.props.renderStatus && currentMessage) {
+            if (user && currentMessage.user.status === user.status) {
+                return null;
+            }
+            return (<View style={styles.content.usernameView}>
+          <Text style={[styles.content.username, this.props.usernameStyle]}>
+            行動：{currentMessage.user.status}
+          </Text>
+        </View>);
+        }
+        return null;
+    }
+    renderTitle() {
+        const { currentMessage, user } = this.props;
+        if (this.props.renderTitle && currentMessage) {
+            if (user && currentMessage.user.title === user.title) {
+                return null;
+            }
+            return (<View style={styles.content.usernameView}>
+          <Text style={[styles.content.username, this.props.usernameStyle]}>
+            タイトル：{currentMessage.user.title}
+          </Text>
+        </View>);
+        }
+        return null;
+    }
     renderCustomView() {
         if (this.props.renderCustomView) {
             return this.props.renderCustomView(this.props);
@@ -266,28 +316,32 @@ export default class Bubble extends React.Component {
     render() {
         const { position, containerStyle, wrapperStyle, bottomContainerStyle, } = this.props;
         return (<View style={[
-                styles[position].container,
-                containerStyle && containerStyle[position],
-            ]}>
-        <View style={[
-                styles[position].wrapper,
-                this.styledBubbleToNext(),
-                this.styledBubbleToPrevious(),
-                wrapperStyle && wrapperStyle[position],
-            ]}>
-          <TouchableWithoutFeedback onPress={this.onPress} onLongPress={this.onLongPress} accessibilityRole='text' {...this.props.touchableProps}>
-            <View>
-              {this.renderBubbleContent()}
-              <View style={[
-                styles[position].bottom,
-                bottomContainerStyle && bottomContainerStyle[position],
-            ]}>
-                {this.renderUsername()}
-                {this.renderTime()}
-                {this.renderTicks()}
+            styles[position].container,
+            containerStyle && containerStyle[position],
+        ]}>
+        {this.renderStatus()}
+        {this.renderTitle()}
+        <View style={{flexDirection:'row'}}>
+          <View style={[
+              styles[position].wrapper,
+              this.styledBubbleToNext(),
+              this.styledBubbleToPrevious(),
+              wrapperStyle && wrapperStyle[position],
+          ]}>
+            <TouchableWithoutFeedback onPress={this.onPress} onLongPress={this.onLongPress} accessibilityTraits='text' {...this.props.touchableProps}>
+              <View>
+                {this.renderBubbleContent()}
+                <View style={[
+              styles[position].bottom,
+              bottomContainerStyle && bottomContainerStyle[position],
+          ]}>
+                  {this.renderUsername()}
+                  {this.renderTicks()}
+                </View>
               </View>
-            </View>
-          </TouchableWithoutFeedback>
+            </TouchableWithoutFeedback>
+          </View>
+          {this.renderTime()}
         </View>
         {this.renderQuickReplies()}
       </View>);
@@ -304,6 +358,8 @@ Bubble.defaultProps = {
     renderMessageText: null,
     renderCustomView: null,
     renderUsername: null,
+    renderStatus: null,
+    renderTitle: null,
     renderTicks: null,
     renderTime: null,
     renderQuickReplies: null,
@@ -329,6 +385,7 @@ Bubble.propTypes = {
     user: PropTypes.object.isRequired,
     touchableProps: PropTypes.object,
     onLongPress: PropTypes.func,
+    onPress: PropTypes.func,
     renderMessageImage: PropTypes.func,
     renderMessageVideo: PropTypes.func,
     renderMessageAudio: PropTypes.func,
@@ -337,6 +394,8 @@ Bubble.propTypes = {
     isCustomViewBottom: PropTypes.bool,
     renderUsernameOnMessage: PropTypes.bool,
     renderUsername: PropTypes.func,
+    renderStatus: PropTypes.bool,
+    renderTitle: PropTypes.bool,
     renderTime: PropTypes.func,
     renderTicks: PropTypes.func,
     renderQuickReplies: PropTypes.func,
diff --git a/node_modules/react-native-gifted-chat/lib/Bubble.js.bak b/node_modules/react-native-gifted-chat/lib/Bubble.js.bak
new file mode 100644
index 0000000..afd382d
--- /dev/null
+++ b/node_modules/react-native-gifted-chat/lib/Bubble.js.bak
@@ -0,0 +1,428 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import { Text, Clipboard, StyleSheet, TouchableWithoutFeedback, View, } from 'react-native';
+import { GiftedChatContext } from './GiftedChatContext';
+import { QuickReplies } from './QuickReplies';
+import { MessageText } from './MessageText';
+import { MessageImage } from './MessageImage';
+import { MessageVideo } from './MessageVideo';
+import { MessageAudio } from './MessageAudio';
+import { Time } from './Time';
+import Color from './Color';
+import { StylePropType, isSameUser, isSameDay } from './utils';
+const styles = {
+    left: StyleSheet.create({
+        container: {
+            flex: 1,
+            alignItems: 'flex-start',
+        },
+        wrapper: {
+            borderRadius: 15,
+            backgroundColor: Color.leftBubbleBackground,
+            // marginRight: 60,
+            minHeight: 20,
+            justifyContent: 'flex-end',
+        },
+        containerToNext: {
+            borderBottomLeftRadius: 3,
+        },
+        containerToPrevious: {
+            borderTopLeftRadius: 3,
+        },
+        bottom: {
+            flexDirection: 'row',
+            justifyContent: 'flex-start',
+        },
+    }),
+    right: StyleSheet.create({
+        container: {
+            flex: 1,
+            alignItems: 'flex-end',
+        },
+        wrapper: {
+            borderRadius: 15,
+            backgroundColor: Color.defaultBlue,
+            marginLeft: 45,
+            minHeight: 20,
+            justifyContent: 'flex-end',
+        },
+        containerToNext: {
+            borderBottomRightRadius: 1,
+        },
+        containerToPrevious: {
+            borderTopRightRadius: 1,
+        },
+        bottom: {
+            flexDirection: 'row',
+            justifyContent: 'flex-end',
+        },
+    }),
+    content: StyleSheet.create({
+        tick: {
+            fontSize: 10,
+            backgroundColor: Color.backgroundTransparent,
+            color: Color.white,
+        },
+        tickView: {
+            flexDirection: 'row',
+            marginRight: 10,
+        },
+        username: {
+            // top: -3,
+            left: 0,
+            fontSize: 12,
+            backgroundColor: 'transparent',
+            color: '#aaa',
+        },
+        usernameView: {
+            flexDirection: 'row',
+            // marginHorizontal: 10,
+        },
+    }),
+};
+const DEFAULT_OPTION_TITLES = ['Copy Text', 'Cancel'];
+export default class Bubble extends React.Component {
+    constructor() {
+        super(...arguments);
+        this.onPress = () => {
+            if (this.props.onPress) {
+                this.props.onPress(this.context, this.props.currentMessage);
+            }
+        };
+        this.onLongPress = () => {
+            const { currentMessage } = this.props;
+            if (this.props.onLongPress) {
+                this.props.onLongPress(this.context, this.props.currentMessage);
+            }
+            else if (currentMessage && currentMessage.text) {
+                const { optionTitles } = this.props;
+                const options = optionTitles && optionTitles.length > 0
+                    ? optionTitles.slice(0, 2)
+                    : DEFAULT_OPTION_TITLES;
+                const cancelButtonIndex = options.length - 1;
+                this.context.actionSheet().showActionSheetWithOptions({
+                    options,
+                    cancelButtonIndex,
+                }, (buttonIndex) => {
+                    switch (buttonIndex) {
+                        case 0:
+                            Clipboard.setString(currentMessage.text);
+                            break;
+                        default:
+                            break;
+                    }
+                });
+            }
+        };
+        this.onPress = () => {
+            const { currentMessage } = this.props;
+            if (this.props.onPress) {
+                this.props.onPress(this.context, this.props.currentMessage);
+            }
+            else if (currentMessage && currentMessage.text) {
+                const { optionTitles } = this.props;
+                const options = optionTitles && optionTitles.length > 0
+                    ? optionTitles.slice(0, 2)
+                    : DEFAULT_OPTION_TITLES;
+                const cancelButtonIndex = options.length - 1;
+                this.context.actionSheet().showActionSheetWithOptions({
+                    options,
+                    cancelButtonIndex,
+                }, (buttonIndex) => {
+                    switch (buttonIndex) {
+                        case 0:
+                            Clipboard.setString(currentMessage.text);
+                            break;
+                        default:
+                            break;
+                    }
+                });
+            }
+        };
+    }
+    styledBubbleToNext() {
+        const { currentMessage, nextMessage, position, containerToNextStyle, } = this.props;
+        if (currentMessage &&
+            nextMessage &&
+            position &&
+            isSameUser(currentMessage, nextMessage) &&
+            isSameDay(currentMessage, nextMessage)) {
+            return [
+                styles[position].containerToNext,
+                containerToNextStyle && containerToNextStyle[position],
+            ];
+        }
+        return null;
+    }
+    styledBubbleToPrevious() {
+        const { currentMessage, previousMessage, position, containerToPreviousStyle, } = this.props;
+        if (currentMessage &&
+            previousMessage &&
+            position &&
+            isSameUser(currentMessage, previousMessage) &&
+            isSameDay(currentMessage, previousMessage)) {
+            return [
+                styles[position].containerToPrevious,
+                containerToPreviousStyle && containerToPreviousStyle[position],
+            ];
+        }
+        return null;
+    }
+    renderQuickReplies() {
+        const { currentMessage, onQuickReply, nextMessage, renderQuickReplySend, quickReplyStyle, quickReplyTextStyle, } = this.props;
+        if (currentMessage && currentMessage.quickReplies) {
+            const { containerStyle, wrapperStyle, ...quickReplyProps } = this.props;
+            if (this.props.renderQuickReplies) {
+                return this.props.renderQuickReplies(quickReplyProps);
+            }
+            return (<QuickReplies currentMessage={currentMessage} onQuickReply={onQuickReply} renderQuickReplySend={renderQuickReplySend} quickReplyStyle={quickReplyStyle} quickReplyTextStyle={quickReplyTextStyle} nextMessage={nextMessage}/>);
+        }
+        return null;
+    }
+    renderMessageText() {
+        if (this.props.currentMessage && this.props.currentMessage.text) {
+            const { containerStyle, wrapperStyle, optionTitles, ...messageTextProps } = this.props;
+            if (this.props.renderMessageText) {
+                return this.props.renderMessageText(messageTextProps);
+            }
+            return <MessageText {...messageTextProps}/>;
+        }
+        return null;
+    }
+    renderMessageImage() {
+        if (this.props.currentMessage && this.props.currentMessage.image) {
+            const { containerStyle, wrapperStyle, ...messageImageProps } = this.props;
+            if (this.props.renderMessageImage) {
+                return this.props.renderMessageImage(messageImageProps);
+            }
+            return <MessageImage {...messageImageProps}/>;
+        }
+        return null;
+    }
+    renderMessageVideo() {
+        if (this.props.currentMessage && this.props.currentMessage.video) {
+            const { containerStyle, wrapperStyle, ...messageVideoProps } = this.props;
+            if (this.props.renderMessageVideo) {
+                return this.props.renderMessageVideo(messageVideoProps);
+            }
+            return <MessageVideo {...messageVideoProps}/>;
+        }
+        return null;
+    }
+    renderMessageAudio() {
+        if (this.props.currentMessage && this.props.currentMessage.audio) {
+            const { containerStyle, wrapperStyle, ...messageAudioProps } = this.props;
+            if (this.props.renderMessageAudio) {
+                return this.props.renderMessageAudio(messageAudioProps);
+            }
+            return <MessageAudio {...messageAudioProps}/>;
+        }
+        return null;
+    }
+    renderTicks() {
+        const { currentMessage, renderTicks, user } = this.props;
+        if (renderTicks && currentMessage) {
+            return renderTicks(currentMessage);
+        }
+        if (currentMessage &&
+            user &&
+            currentMessage.user &&
+            currentMessage.user._id !== user._id) {
+            return null;
+        }
+        if (currentMessage &&
+            (currentMessage.sent || currentMessage.received || currentMessage.pending)) {
+            return (<View style={styles.content.tickView}>
+          {!!currentMessage.sent && (<Text style={[styles.content.tick, this.props.tickStyle]}>✓</Text>)}
+          {!!currentMessage.received && (<Text style={[styles.content.tick, this.props.tickStyle]}>✓</Text>)}
+          {!!currentMessage.pending && (<Text style={[styles.content.tick, this.props.tickStyle]}>🕓</Text>)}
+        </View>);
+        }
+        return null;
+    }
+    renderTime() {
+        if (this.props.currentMessage && this.props.currentMessage.createdAt) {
+            const { containerStyle, wrapperStyle, textStyle, ...timeProps } = this.props;
+            if (this.props.renderTime) {
+                return this.props.renderTime(timeProps);
+            }
+            return <Time {...timeProps}/>;
+        }
+        return null;
+    }
+    renderUsername() {
+        const { currentMessage, user } = this.props;
+        if (this.props.renderUsernameOnMessage && currentMessage) {
+            if (user && currentMessage.user._id === user._id) {
+                return null;
+            }
+            return (<View style={styles.content.usernameView}>
+          <Text style={[styles.content.username, this.props.usernameStyle]}>
+            ~ {currentMessage.user.name}
+          </Text>
+        </View>);
+        }
+        return null;
+    }
+    renderStatus() {
+        const { currentMessage, user } = this.props;
+        if (this.props.renderStatus && currentMessage) {
+            if (user && currentMessage.user.status === user.status) {
+                return null;
+            }
+            return (<View style={styles.content.usernameView}>
+          <Text style={[styles.content.username, this.props.usernameStyle]}>
+            行動：{currentMessage.user.status}
+          </Text>
+        </View>);
+        }
+        return null;
+    }
+    renderTitle() {
+        const { currentMessage, user } = this.props;
+        if (this.props.renderTitle && currentMessage) {
+            if (user && currentMessage.user.title === user.title) {
+                return null;
+            }
+            return (<View style={styles.content.usernameView}>
+          <Text style={[styles.content.username, this.props.usernameStyle]}>
+            タイトル：{currentMessage.user.title}
+          </Text>
+        </View>);
+        }
+        return null;
+    }
+    renderCustomView() {
+        if (this.props.renderCustomView) {
+            return this.props.renderCustomView(this.props);
+        }
+        return null;
+    }
+    renderBubbleContent() {
+        return this.props.isCustomViewBottom ? (<View>
+        {this.renderMessageImage()}
+        {this.renderMessageVideo()}
+        {this.renderMessageAudio()}
+        {this.renderMessageText()}
+        {this.renderCustomView()}
+      </View>) : (<View>
+        {this.renderCustomView()}
+        {this.renderMessageImage()}
+        {this.renderMessageVideo()}
+        {this.renderMessageAudio()}
+        {this.renderMessageText()}
+      </View>);
+    }
+    render() {
+        const { position, containerStyle, wrapperStyle, bottomContainerStyle, } = this.props;
+        return (<View style={[
+            styles[position].container,
+            containerStyle && containerStyle[position],
+        ]}>
+        {this.renderStatus()}
+        {this.renderTitle()}
+        <View style={{flexDirection:'row'}}>
+          <View style={[
+              styles[position].wrapper,
+              this.styledBubbleToNext(),
+              this.styledBubbleToPrevious(),
+              wrapperStyle && wrapperStyle[position],
+          ]}>
+            <TouchableWithoutFeedback onPress={this.onPress} onLongPress={this.onLongPress} accessibilityTraits='text' {...this.props.touchableProps}>
+              <View>
+                {this.renderBubbleContent()}
+                <View style={[
+              styles[position].bottom,
+              bottomContainerStyle && bottomContainerStyle[position],
+          ]}>
+                  {this.renderUsername()}
+                  {this.renderTicks()}
+                </View>
+              </View>
+            </TouchableWithoutFeedback>
+          </View>
+          {this.renderTime()}
+        </View>
+        {this.renderQuickReplies()}
+      </View>);
+    }
+}
+Bubble.contextType = GiftedChatContext;
+Bubble.defaultProps = {
+    touchableProps: {},
+    onPress: null,
+    onLongPress: null,
+    renderMessageImage: null,
+    renderMessageVideo: null,
+    renderMessageAudio: null,
+    renderMessageText: null,
+    renderCustomView: null,
+    renderUsername: null,
+    renderStatus: null,
+    renderTitle: null,
+    renderTicks: null,
+    renderTime: null,
+    renderQuickReplies: null,
+    onQuickReply: null,
+    position: 'left',
+    optionTitles: DEFAULT_OPTION_TITLES,
+    currentMessage: {
+        text: null,
+        createdAt: null,
+        image: null,
+    },
+    nextMessage: {},
+    previousMessage: {},
+    containerStyle: {},
+    wrapperStyle: {},
+    bottomContainerStyle: {},
+    tickStyle: {},
+    usernameStyle: {},
+    containerToNextStyle: {},
+    containerToPreviousStyle: {},
+};
+Bubble.propTypes = {
+    user: PropTypes.object.isRequired,
+    touchableProps: PropTypes.object,
+    onLongPress: PropTypes.func,
+    renderMessageImage: PropTypes.func,
+    renderMessageVideo: PropTypes.func,
+    renderMessageAudio: PropTypes.func,
+    renderMessageText: PropTypes.func,
+    renderCustomView: PropTypes.func,
+    isCustomViewBottom: PropTypes.bool,
+    renderUsernameOnMessage: PropTypes.bool,
+    renderUsername: PropTypes.func,
+    renderTime: PropTypes.func,
+    renderTicks: PropTypes.func,
+    renderQuickReplies: PropTypes.func,
+    onQuickReply: PropTypes.func,
+    position: PropTypes.oneOf(['left', 'right']),
+    optionTitles: PropTypes.arrayOf(PropTypes.string),
+    currentMessage: PropTypes.object,
+    nextMessage: PropTypes.object,
+    previousMessage: PropTypes.object,
+    containerStyle: PropTypes.shape({
+        left: StylePropType,
+        right: StylePropType,
+    }),
+    wrapperStyle: PropTypes.shape({
+        left: StylePropType,
+        right: StylePropType,
+    }),
+    bottomContainerStyle: PropTypes.shape({
+        left: StylePropType,
+        right: StylePropType,
+    }),
+    tickStyle: StylePropType,
+    usernameStyle: StylePropType,
+    containerToNextStyle: PropTypes.shape({
+        left: StylePropType,
+        right: StylePropType,
+    }),
+    containerToPreviousStyle: PropTypes.shape({
+        left: StylePropType,
+        right: StylePropType,
+    }),
+};
+//# sourceMappingURL=Bubble.js.map
\ No newline at end of file
diff --git a/node_modules/react-native-gifted-chat/lib/MessageText.js b/node_modules/react-native-gifted-chat/lib/MessageText.js
index dd834d6..68f0441 100644
--- a/node_modules/react-native-gifted-chat/lib/MessageText.js
+++ b/node_modules/react-native-gifted-chat/lib/MessageText.js
@@ -1,6 +1,7 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import { Linking, StyleSheet, View, } from 'react-native';
+import { Linking, StyleSheet, View,useWindowDimensions } from 'react-native';
+import RenderHtml from 'react-native-render-html';
 // @ts-ignore
 import ParsedText from 'react-native-parsed-text';
 import { StylePropType } from './utils';
@@ -21,22 +22,22 @@ const styles = {
     left: StyleSheet.create({
         container: {},
         text: {
-            color: 'black',
+            color: 'white',
             ...textStyle,
         },
         link: {
-            color: 'black',
+            color: 'white',
             textDecorationLine: 'underline',
         },
     }),
     right: StyleSheet.create({
         container: {},
         text: {
-            color: 'white',
+            color: '#1f2d53',
             ...textStyle,
         },
         link: {
-            color: 'white',
+            color: '#1f2d53',
             textDecorationLine: 'underline',
         },
     }),
@@ -94,7 +95,9 @@ export function MessageText({ currentMessage = {}, optionTitles = DEFAULT_OPTION
         styles[position].link,
         linkStyleProp && linkStyleProp[position],
     ];
-    return (<View style={[
+    if (!currentMessage.user.html_flg && (currentMessage.user.title !== '入居申込書' && currentMessage.user.status !== 'その他')) {
+      
+          return (<View style={[
             styles[position].container,
             containerStyle && containerStyle[position],
         ]}>
@@ -110,7 +113,43 @@ export function MessageText({ currentMessage = {}, optionTitles = DEFAULT_OPTION
         ]} childrenProps={{ ...textProps }}>
         {currentMessage.text}
       </ParsedText>
-    </View>);
+      </View>);
+    }
+    else {
+
+      const { width } = useWindowDimensions();
+      let source = currentMessage.text.split('”').join('"');
+      
+      // メールモンスター用のCSS変更
+      source = source.split('height:100%').join('')
+      source = source.split('widows:100%').join('width:100%')
+      source = source.split('width:100%').join('width:250px')
+      source = source.split('size=280&').join('size=120&')
+      
+      return (<View style={[
+            styles[position].container,
+            containerStyle &&
+                containerStyle[position],
+        ]}>
+        <View style={[
+            styles[position].text,
+            textStyle && textStyle[position],
+            customTextStyle,
+        ]} parse={[
+            ...parsePatterns(linkStyle),
+            { type: 'url', style: linkStyle, onPress: this.onUrlPress },
+            { type: 'phone', style: linkStyle, onPress: this.onPhonePress },
+            { type: 'email', style: linkStyle, onPress: this.onEmailPress },
+        ]} childrenProps={{ ...textProps }}>
+          <RenderHtml
+            contentWidth={width}
+            source={{
+              html: `${source}`,
+            }}
+          />
+        </View>
+      </View>);
+    }
 }
 MessageText.propTypes = {
     position: PropTypes.oneOf(['left', 'right']),
diff --git a/node_modules/react-native-gifted-chat/lib/MessageText.js.bak b/node_modules/react-native-gifted-chat/lib/MessageText.js.bak
new file mode 100644
index 0000000..dd834d6
--- /dev/null
+++ b/node_modules/react-native-gifted-chat/lib/MessageText.js.bak
@@ -0,0 +1,135 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import { Linking, StyleSheet, View, } from 'react-native';
+// @ts-ignore
+import ParsedText from 'react-native-parsed-text';
+import { StylePropType } from './utils';
+import { useChatContext } from './GiftedChatContext';
+import { error } from './logging';
+const WWW_URL_PATTERN = /^www\./i;
+const { textStyle } = StyleSheet.create({
+    textStyle: {
+        fontSize: 16,
+        lineHeight: 20,
+        marginTop: 5,
+        marginBottom: 5,
+        marginLeft: 10,
+        marginRight: 10,
+    },
+});
+const styles = {
+    left: StyleSheet.create({
+        container: {},
+        text: {
+            color: 'black',
+            ...textStyle,
+        },
+        link: {
+            color: 'black',
+            textDecorationLine: 'underline',
+        },
+    }),
+    right: StyleSheet.create({
+        container: {},
+        text: {
+            color: 'white',
+            ...textStyle,
+        },
+        link: {
+            color: 'white',
+            textDecorationLine: 'underline',
+        },
+    }),
+};
+const DEFAULT_OPTION_TITLES = ['Call', 'Text', 'Cancel'];
+export function MessageText({ currentMessage = {}, optionTitles = DEFAULT_OPTION_TITLES, position = 'left', containerStyle, textStyle, linkStyle: linkStyleProp, customTextStyle, parsePatterns = () => [], textProps, }) {
+    const { actionSheet } = useChatContext();
+    // TODO: React.memo
+    // const shouldComponentUpdate = (nextProps: MessageTextProps<TMessage>) => {
+    //   return (
+    //     !!currentMessage &&
+    //     !!nextProps.currentMessage &&
+    //     currentMessage.text !== nextProps.currentMessage.text
+    //   )
+    // }
+    const onUrlPress = (url) => {
+        // When someone sends a message that includes a website address beginning with "www." (omitting the scheme),
+        // react-native-parsed-text recognizes it as a valid url, but Linking fails to open due to the missing scheme.
+        if (WWW_URL_PATTERN.test(url)) {
+            onUrlPress(`https://${url}`);
+        }
+        else {
+            Linking.openURL(url).catch(e => {
+                error(e, 'No handler for URL:', url);
+            });
+        }
+    };
+    const onPhonePress = (phone) => {
+        const options = optionTitles && optionTitles.length > 0
+            ? optionTitles.slice(0, 3)
+            : DEFAULT_OPTION_TITLES;
+        const cancelButtonIndex = options.length - 1;
+        actionSheet().showActionSheetWithOptions({
+            options,
+            cancelButtonIndex,
+        }, (buttonIndex) => {
+            switch (buttonIndex) {
+                case 0:
+                    Linking.openURL(`tel:${phone}`).catch(e => {
+                        error(e, 'No handler for telephone');
+                    });
+                    break;
+                case 1:
+                    Linking.openURL(`sms:${phone}`).catch(e => {
+                        error(e, 'No handler for text');
+                    });
+                    break;
+                default:
+                    break;
+            }
+        });
+    };
+    const onEmailPress = (email) => Linking.openURL(`mailto:${email}`).catch(e => error(e, 'No handler for mailto'));
+    const linkStyle = [
+        styles[position].link,
+        linkStyleProp && linkStyleProp[position],
+    ];
+    return (<View style={[
+            styles[position].container,
+            containerStyle && containerStyle[position],
+        ]}>
+      <ParsedText style={[
+            styles[position].text,
+            textStyle && textStyle[position],
+            customTextStyle,
+        ]} parse={[
+            ...parsePatterns(linkStyle),
+            { type: 'url', style: linkStyle, onPress: onUrlPress },
+            { type: 'phone', style: linkStyle, onPress: onPhonePress },
+            { type: 'email', style: linkStyle, onPress: onEmailPress },
+        ]} childrenProps={{ ...textProps }}>
+        {currentMessage.text}
+      </ParsedText>
+    </View>);
+}
+MessageText.propTypes = {
+    position: PropTypes.oneOf(['left', 'right']),
+    optionTitles: PropTypes.arrayOf(PropTypes.string),
+    currentMessage: PropTypes.object,
+    containerStyle: PropTypes.shape({
+        left: StylePropType,
+        right: StylePropType,
+    }),
+    textStyle: PropTypes.shape({
+        left: StylePropType,
+        right: StylePropType,
+    }),
+    linkStyle: PropTypes.shape({
+        left: StylePropType,
+        right: StylePropType,
+    }),
+    parsePatterns: PropTypes.func,
+    textProps: PropTypes.object,
+    customTextStyle: StylePropType,
+};
+//# sourceMappingURL=MessageText.js.map
\ No newline at end of file
diff --git a/node_modules/react-native-gifted-chat/lib/Time.js b/node_modules/react-native-gifted-chat/lib/Time.js
index 821a899..76eeb41 100644
--- a/node_modules/react-native-gifted-chat/lib/Time.js
+++ b/node_modules/react-native-gifted-chat/lib/Time.js
@@ -8,8 +8,8 @@ import { StylePropType } from './utils';
 import { useChatContext } from './GiftedChatContext';
 const { containerStyle } = StyleSheet.create({
     containerStyle: {
-        marginLeft: 10,
-        marginRight: 10,
+        // marginLeft: 10,
+        // marginRight: 10,
         marginBottom: 5,
     },
 });
@@ -18,12 +18,15 @@ const { textStyle } = StyleSheet.create({
         fontSize: 10,
         backgroundColor: 'transparent',
         textAlign: 'right',
+    	color:'#1f2d53'
     },
 });
 const styles = {
     left: StyleSheet.create({
         container: {
             ...containerStyle,
+            marginLeft: 5,
+            justifyContent: 'flex-end'
         },
         text: {
             color: Color.timeTextColor,
@@ -33,9 +36,12 @@ const styles = {
     right: StyleSheet.create({
         container: {
             ...containerStyle,
+            position:'absolute',
+            left:0,
+            bottom:0,
         },
         text: {
-            color: Color.white,
+            color: '#1f2d53',
             ...textStyle,
         },
     }),
diff --git a/node_modules/react-native-gifted-chat/lib/Time.js.bak b/node_modules/react-native-gifted-chat/lib/Time.js.bak
new file mode 100644
index 0000000..8e3bc8e
--- /dev/null
+++ b/node_modules/react-native-gifted-chat/lib/Time.js.bak
@@ -0,0 +1,76 @@
+import * as React from 'react';
+import PropTypes from 'prop-types';
+import { StyleSheet, Text, View } from 'react-native';
+import dayjs from 'dayjs';
+import Color from './Color';
+import { TIME_FORMAT } from './Constant';
+import { StylePropType } from './utils';
+import { useChatContext } from './GiftedChatContext';
+const { containerStyle } = StyleSheet.create({
+    containerStyle: {
+        // marginLeft: 10,
+        // marginRight: 10,
+        marginBottom: 5,
+    },
+});
+const { textStyle } = StyleSheet.create({
+    textStyle: {
+        fontSize: 10,
+        backgroundColor: 'transparent',
+        textAlign: 'right',
+    	color:'#1f2d53'
+    },
+});
+const styles = {
+    left: StyleSheet.create({
+        container: {
+            ...containerStyle,
+            marginLeft: 5,
+            justifyContent: 'flex-end'
+        },
+        text: {
+            color: Color.timeTextColor,
+            ...textStyle,
+        },
+    }),
+    right: StyleSheet.create({
+        container: {
+            ...containerStyle,
+        },
+        text: {
+            color: Color.white,
+            ...textStyle,
+        },
+    }),
+};
+export function Time({ position = 'left', containerStyle, currentMessage, timeFormat = TIME_FORMAT, timeTextStyle, }) {
+    const { getLocale } = useChatContext();
+    if (currentMessage == null) {
+        return null;
+    }
+    return (<View style={[
+            styles[position].container,
+            containerStyle && containerStyle[position],
+        ]}>
+      <Text style={[
+            styles[position].text,
+            timeTextStyle && timeTextStyle[position],
+        ]}>
+        {dayjs(currentMessage.createdAt).locale(getLocale()).format(timeFormat)}
+      </Text>
+    </View>);
+}
+Time.propTypes = {
+    position: PropTypes.oneOf(['left', 'right']),
+    currentMessage: PropTypes.object,
+    containerStyle: PropTypes.shape({
+        left: StylePropType,
+        right: StylePropType,
+    }),
+    timeFormat: PropTypes.string,
+    timeTextStyle: PropTypes.shape({
+        left: StylePropType,
+        right: StylePropType,
+    }),
+};
+//# sourceMappingURL=Time.js.map
\ No newline at end of file
