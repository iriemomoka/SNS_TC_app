{"version":3,"file":"index.js","sources":["../src/ReactNativeZoomableView.tsx","../src/ReactNativeZoomableViewWithGestures.tsx"],"sourcesContent":["import {\n  ReactNativeZoomableViewProps,\n  ReactNativeZoomableViewState,\n  ZoomableViewEvent,\n} from '@dudigital/react-native-zoomable-view';\nimport React, { Component } from 'react';\nimport { View, StyleSheet, PanResponder } from 'react-native';\n\nconst initialState = {\n  lastZoomLevel: 1,\n  offsetX: 0,\n  offsetY: 0,\n  lastX: 0,\n  lastY: 0,\n  lastMovePinch: false,\n  originalWidth: null,\n  originalHeight: null,\n};\n\nclass ReactNativeZoomableView extends Component<ReactNativeZoomableViewProps, ReactNativeZoomableViewState> {\n  gestureHandlers: any;\n  distance: number;\n  isDistanceSet: boolean;\n  lastPressHolder: number;\n  gestureType: 'pinch' | 'shift' | 'null';\n  contextState = {\n    distanceLeft: 0,\n    distanceRight: 0,\n    distanceTop: 0,\n    distanceBottom: 0,\n  };\n\n  static defaultProps = {\n    zoomEnabled: true,\n    initialZoom: 1,\n    initialOffsetX: 0,\n    initialOffsetY: 0,\n    maxZoom: 1.5,\n    minZoom: 0.5,\n    pinchToZoomInSensitivity: 3,\n    pinchToZoomOutSensitivity: 1,\n    zoomCenteringLevelDistance: 0.5,\n    movementSensibility: 1.9,\n    doubleTapDelay: 300,\n    bindToBorders: true,\n    zoomStep: 0.5,\n    onLongPress: null,\n    longPressDuration: 700,\n    captureEvent: false,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.gestureHandlers = PanResponder.create({\n      onStartShouldSetPanResponder: this._handleStartShouldSetPanResponder,\n      onMoveShouldSetPanResponder: this._handleMoveShouldSetPanResponder,\n      onPanResponderGrant: this._handlePanResponderGrant,\n      onPanResponderMove: this._handlePanResponderMove,\n      onPanResponderRelease: this._handlePanResponderEnd,\n      onPanResponderTerminate: props.onPanResponderTerminate,\n      onPanResponderTerminationRequest: props.onPanResponderTerminationRequest ?? ((evt) => false),\n      onShouldBlockNativeResponder: (evt) => false,\n    });\n\n    this.state = {\n      ...initialState,\n      zoomLevel: props.initialZoom,\n      lastZoomLevel: props.initialZoom || initialState.lastZoomLevel,\n      offsetX: props.initialOffsetX,\n      offsetY: props.initialOffsetY,\n    };\n\n    this.distance = 150;\n    this.isDistanceSet = true;\n\n    this.gestureType = null;\n\n    this.contextState = {\n      distanceLeft: 0,\n      distanceRight: 0,\n      distanceTop: 0,\n      distanceBottom: 0,\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const { zoomEnabled, initialZoom } = this.props;\n    if (prevProps.zoomEnabled && !zoomEnabled) {\n      this.setState({\n        zoomLevel: initialZoom,\n        ...initialState,\n      });\n    }\n  }\n\n  /**\n   * Last press time (used to evaluate whether user double tapped)\n   * @type {number}\n   */\n  longPressTimeout = null;\n\n  /**\n   * Current position of zoom center\n   * @type { x: number, y: number }\n   */\n  pinchZoomPosition = null;\n\n  /**\n   * Returns additional information about components current state for external event hooks\n   *\n   * @returns {{}}\n   * @private\n   */\n  _getZoomableViewEventObject(overwriteObj = {}): ZoomableViewEvent {\n    return {\n      ...this.state,\n      ...this.contextState,\n      ...overwriteObj,\n    } as ZoomableViewEvent;\n  }\n\n  /**\n   * Get the original box dimensions and save them for later use.\n   * (They will be used to calculate boxBorders)\n   *\n   * @param layoutEvent\n   * @private\n   */\n  _getBoxDimensions = (layoutEvent) => {\n    const { x, y, height, width } = layoutEvent.nativeEvent.layout;\n\n    this.setState({\n      originalWidth: width,\n      originalHeight: height,\n    });\n  };\n\n  /**\n   * Handles the start of touch events and checks for taps\n   *\n   * @param e\n   * @param gestureState\n   * @returns {boolean}\n   *\n   * @private\n   */\n  _handleStartShouldSetPanResponder = (e, gestureState) => {\n    this._doubleTapCheck(e, gestureState);\n\n    if (this.props.onStartShouldSetPanResponder) {\n      this.props.onStartShouldSetPanResponder(e, gestureState, this._getZoomableViewEventObject(), false);\n    }\n\n    return this.props.captureEvent;\n  };\n\n  /**\n   * Checks if the movement responder should be triggered\n   *\n   * @param e\n   * @param gestureState\n   * @returns {Boolean|boolean}\n   */\n  _handleMoveShouldSetPanResponder = (e, gestureState) => {\n    let baseComponentResult =\n      this.props.zoomEnabled &&\n      (Math.abs(gestureState.dx) > 2 || Math.abs(gestureState.dy) > 2 || gestureState.numberActiveTouches === 2);\n\n    if (this.props.onMoveShouldSetPanResponder) {\n      baseComponentResult = this.props.onMoveShouldSetPanResponder(\n        e,\n        gestureState,\n        this._getZoomableViewEventObject(),\n        baseComponentResult,\n      );\n    }\n\n    return baseComponentResult;\n  };\n\n  /**\n   * Calculates pinch distance\n   *\n   * @param e\n   * @param gestureState\n   * @private\n   */\n  _handlePanResponderGrant = (e, gestureState) => {\n    this.isDistanceSet = false;\n\n    if (gestureState.numberActiveTouches === 2) {\n      let dx = Math.abs(e.nativeEvent.touches[0].pageX - e.nativeEvent.touches[1].pageX);\n      let dy = Math.abs(e.nativeEvent.touches[0].pageY - e.nativeEvent.touches[1].pageY);\n\n      let distant = Math.sqrt(dx * dx + dy * dy);\n      this.distance = distant;\n      this.isDistanceSet = true;\n    }\n\n    if (this.props.onLongPress) {\n      this.longPressTimeout = setTimeout(() => {\n        if (this.props.onLongPress) {\n          this.props.onLongPress(e, gestureState, this._getZoomableViewEventObject());\n          this.longPressTimeout = null;\n        }\n      }, this.props.longPressDuration);\n    }\n\n    if (this.props.onPanResponderGrant) {\n      this.props.onPanResponderGrant(e, gestureState, this._getZoomableViewEventObject());\n    }\n  };\n\n  /**\n   * Handles the end of touch events\n   *\n   * @param e\n   * @param gestureState\n   *\n   * @private\n   */\n  _handlePanResponderEnd = (e, gestureState) => {\n    this.setState({\n      lastX: this.state.offsetX,\n      lastY: this.state.offsetY,\n      lastZoomLevel: this.state.zoomLevel,\n    });\n\n    if (this.longPressTimeout) {\n      clearTimeout(this.longPressTimeout);\n      this.longPressTimeout = null;\n    }\n\n    if (this.props.onPanResponderEnd) {\n      this.props.onPanResponderEnd(e, gestureState, this._getZoomableViewEventObject());\n    }\n\n    if (this.gestureType === 'pinch') {\n      this.pinchZoomPosition = null;\n      if (this.props.onZoomEnd) {\n        this.props.onZoomEnd(e, gestureState, this._getZoomableViewEventObject());\n      }\n    } else if (this.gestureType === 'shift') {\n      if (this.props.onShiftingEnd) {\n        this.props.onShiftingEnd(e, gestureState, this._getZoomableViewEventObject());\n      }\n    }\n\n    this.gestureType = null;\n  };\n\n  /**\n   * Takes a single offset value and calculates the correct offset value within our view to make\n   *\n   * @param {'x'|'y'} axis\n   * @param offsetValue\n   * @param containerSize\n   * @param elementSize\n   * @param zoomLevel\n   *\n   * @returns {number}\n   */\n  _getBoundOffsetValue(\n    axis: 'x' | 'y',\n    offsetValue: number,\n    containerSize: number,\n    elementSize: number,\n    zoomLevel: number,\n  ) {\n    const zoomLevelOffsetValue = zoomLevel * offsetValue;\n\n    const containerToScaledElementRatioSub = 1 - containerSize / elementSize;\n    const halfLengthPlusScaledHalf = 0.5 + 0.5 / zoomLevel;\n    const startBorder = containerSize * containerToScaledElementRatioSub * halfLengthPlusScaledHalf;\n    const endBorder = (containerSize + startBorder - containerSize) * -1;\n\n    // calculate distance to start and end borders\n    const distanceToStart = offsetValue - startBorder;\n    const distanceToEnd = (offsetValue + startBorder) * -1;\n\n    // set context for callback events\n    this._setContextStateDistances(axis, distanceToStart, distanceToEnd);\n\n    // if both sides (before and after the element) have a positive distance\n    // => (our zoomed content is smaller than the frame)\n    // => so center it\n    if (containerSize > elementSize) {\n      return containerSize / 2 - elementSize / 2 / zoomLevel;\n    }\n\n    // if everything above failed\n    // => (one side is outside of the borders)\n    // => find out which one it is and make sure it is 0\n    if (distanceToStart > 0) {\n      return startBorder;\n    }\n\n    // if there is distance to the end border\n    // => (it is outside of the box)\n    // => adjust offset to make sure it stays within\n    if (distanceToEnd > 0) {\n      return endBorder;\n    }\n\n    // if everything above failed\n    // => (everything is within borders)\n    // => just return the original offset value\n    return offsetValue;\n  }\n\n  /**\n   * Sets the distance to borders for callback events\n   *\n   * @param axis\n   * @param distanceToStart\n   * @param distanceToEnd\n   * @private\n   */\n  _setContextStateDistances(axis: 'x' | 'y', distanceToStart: number, distanceToEnd: number) {\n    if (axis === 'x') {\n      this.contextState.distanceLeft = distanceToStart;\n      this.contextState.distanceRight = distanceToEnd;\n      return;\n    }\n\n    this.contextState.distanceTop = distanceToStart;\n    this.contextState.distanceBottom = distanceToEnd;\n  }\n\n  /**\n   * Takes a change object (that is going to be used in setState) and makes sure offsetX and\n   * offsetY are within our view borders. If that is not the case, they will be corrected.\n   *\n   * @param changeObj the object that is going to be modified.\n   *    Needs to contain at least the following elements:\n   *    {\n   *      zoomLevel: numeric,\n   *      offsetX: numeric,\n   *      offsetY: numeric,\n   *    }\n   * @private\n   */\n  _bindOffsetValuesToBorders(changeObj, bindToBorders = null) {\n    // if bindToBorders is disabled -> nothing do here\n    if (bindToBorders === false || (bindToBorders === null && !this.props.bindToBorders)) {\n      return changeObj;\n    }\n\n    const { originalWidth, originalHeight } = this.state;\n\n    const currentElementWidth = originalWidth * changeObj.zoomLevel;\n    const currentElementHeight = originalHeight * changeObj.zoomLevel;\n\n    // make sure that view doesn't go out of borders\n    const offsetXBound = this._getBoundOffsetValue(\n      'x',\n      changeObj.offsetX,\n      originalWidth,\n      currentElementWidth,\n      changeObj.zoomLevel,\n    );\n    changeObj.offsetX = offsetXBound;\n\n    const offsetYBound = this._getBoundOffsetValue(\n      'y',\n      changeObj.offsetY,\n      originalHeight,\n      currentElementHeight,\n      changeObj.zoomLevel,\n    );\n    changeObj.offsetY = offsetYBound;\n\n    return changeObj;\n  }\n\n  /**\n   * Handles the acutal movement of our pan responder\n   *\n   * @param e\n   * @param gestureState\n   *\n   * @private\n   */\n  _handlePanResponderMove = (e, gestureState) => {\n    if (this.props.onPanResponderMove) {\n      if (this.props.onPanResponderMove(e, gestureState, this._getZoomableViewEventObject())) {\n        return false;\n      }\n    }\n\n    if (gestureState.numberActiveTouches === 2) {\n      if (this.longPressTimeout) {\n        clearTimeout(this.longPressTimeout);\n        this.longPressTimeout = null;\n      }\n\n      if (!this.isDistanceSet) {\n        this._handlePanResponderGrant(e, gestureState);\n      }\n\n      this.gestureType = 'pinch';\n      this._handlePinching(e, gestureState);\n    } else if (gestureState.numberActiveTouches === 1) {\n      if (this.longPressTimeout && (Math.abs(gestureState.dx) > 5 || Math.abs(gestureState.dy) > 5)) {\n        clearTimeout(this.longPressTimeout);\n        this.longPressTimeout = null;\n      }\n\n      if (this.gestureType !== 'pinch') {\n        this.gestureType = 'shift';\n      }\n      this._handleMovement(e, gestureState);\n    }\n  };\n\n  /**\n   * Handles the pinch movement and zooming\n   *\n   * @param e\n   * @param gestureState\n   *\n   * @private\n   */\n  _handlePinching = (e, gestureState) => {\n    const { maxZoom, minZoom, zoomCenteringLevelDistance, pinchToZoomInSensitivity, pinchToZoomOutSensitivity } =\n      this.props;\n\n    let dx = Math.abs(e.nativeEvent.touches[0].pageX - e.nativeEvent.touches[1].pageX);\n    let dy = Math.abs(e.nativeEvent.touches[0].pageY - e.nativeEvent.touches[1].pageY);\n    let distant = Math.sqrt(dx * dx + dy * dy);\n\n    if (this.props.onZoomBefore) {\n      if (this.props.onZoomBefore(e, gestureState, this._getZoomableViewEventObject())) {\n        return false;\n      }\n    }\n\n    // define the new zoom level and take zoom level sensitivity into consideration\n    const zoomChangeFromStartOfPinch = distant / this.distance;\n    const pinchToZoomSensitivity =\n      zoomChangeFromStartOfPinch < 1 ? pinchToZoomOutSensitivity : pinchToZoomInSensitivity;\n    let zoomLevel =\n      (zoomChangeFromStartOfPinch * this.state.lastZoomLevel + this.state.lastZoomLevel * pinchToZoomSensitivity) /\n      (pinchToZoomSensitivity + 1);\n\n    // make sure max and min zoom levels are respected\n    if (maxZoom !== null && zoomLevel > maxZoom) {\n      zoomLevel = maxZoom;\n    }\n\n    if (zoomLevel < minZoom) {\n      zoomLevel = minZoom;\n    }\n\n    // only use the first position we get by pinching, or the screen will \"wobble\" during zoom action\n    if (this.pinchZoomPosition === null) {\n      const pinchToZoomCenterX = Math.min(e.nativeEvent.touches[0].pageX, e.nativeEvent.touches[1].pageX) + dx / 2;\n      const pinchToZoomCenterY = Math.min(e.nativeEvent.touches[0].pageY, e.nativeEvent.touches[1].pageY) + dy / 2;\n\n      this.pinchZoomPosition = this._getOffsetAdjustedPosition(pinchToZoomCenterX, pinchToZoomCenterY);\n    }\n\n    // make sure we shift the layer slowly during our zoom movement\n    const zoomStage = Math.abs(zoomLevel - this.state.lastZoomLevel) / zoomCenteringLevelDistance;\n\n    const ratioOffsetX = this.state.lastX + zoomStage * this.pinchZoomPosition.x;\n    const ratioOffsetY = this.state.lastY + zoomStage * this.pinchZoomPosition.y;\n\n    // define the changeObject and make sure the offset values are bound to view\n    const changeStateObj = this._bindOffsetValuesToBorders(\n      {\n        zoomLevel,\n        lastMovePinch: true,\n        offsetX: ratioOffsetX,\n        offsetY: ratioOffsetY,\n      },\n      null,\n    );\n\n    this.setState(changeStateObj, () => {\n      if (this.props.onZoomAfter) {\n        this.props.onZoomAfter(e, gestureState, this._getZoomableViewEventObject());\n      }\n    });\n  };\n\n  /**\n   * Handles movement by tap and move\n   *\n   * @param e\n   * @param gestureState\n   *\n   * @private\n   */\n  _handleMovement = (e, gestureState) => {\n    const { movementSensibility } = this.props;\n\n    // make sure not to accidentally move after pinch to zoom\n    if (this.pinchZoomPosition) {\n      return;\n    }\n\n    let offsetX = this.state.lastX + gestureState.dx / this.state.zoomLevel / movementSensibility;\n    let offsetY = this.state.lastY + gestureState.dy / this.state.zoomLevel / movementSensibility;\n\n    this._setNewOffsetPosition(offsetX, offsetY);\n  };\n\n  /**\n   * Set the state to offset moved\n   *\n   * @param {number} newOffsetX\n   * @param {number} newOffsetY\n   * @param {bool} bindToBorders\n   * @param {bool} updateLastCoords should the last coordinates be updated as well?\n   * @param {() => void)} callbk\n   * @returns\n   */\n  _setNewOffsetPosition = (\n    newOffsetX: number,\n    newOffsetY: number,\n    bindToBorders = true,\n    updateLastCoords = false,\n    callbk = null,\n  ) => {\n    const { onShiftingBefore, onShiftingAfter } = this.props;\n\n    if (onShiftingBefore) {\n      if (onShiftingBefore(null, null, this._getZoomableViewEventObject())) {\n        return false;\n      }\n    }\n\n    const changeStateObj = this._bindOffsetValuesToBorders(\n      {\n        lastMovePinch: false,\n        zoomLevel: this.state.zoomLevel,\n        offsetX: newOffsetX,\n        offsetY: newOffsetY,\n      },\n      bindToBorders,\n    );\n\n    // if we want to update last coords as well -> do that\n    if (updateLastCoords) {\n      changeStateObj.lastX = changeStateObj.offsetX;\n      changeStateObj.lastY = changeStateObj.offsetY;\n    }\n\n    this.setState(changeStateObj, () => {\n      if (callbk) {\n        callbk();\n      }\n\n      if (onShiftingAfter) {\n        if (onShiftingAfter(null, null, this._getZoomableViewEventObject())) {\n          return false;\n        }\n      }\n    });\n  };\n\n  /**\n   * Wraps the check for double tap\n   *\n   * @param e\n   * @param gestureState\n   *\n   * @private\n   */\n  _doubleTapCheck = (e, gestureState) => {\n    const now = new Date().getTime();\n\n    if (this.lastPressHolder && now - this.lastPressHolder < this.props.doubleTapDelay) {\n      delete this.lastPressHolder;\n      this._handleDoubleTap(e, gestureState);\n    } else {\n      this.lastPressHolder = now;\n    }\n  };\n\n  /**\n   * Handles the double tap event\n   *\n   * @param event\n   * @param gestureState\n   *\n   * @private\n   */\n  _handleDoubleTap(e, gestureState) {\n    const { onDoubleTapBefore, onDoubleTapAfter, doubleTapZoomToCenter } = this.props;\n\n    // ignore more than 2 touches\n    if (gestureState.numberActiveTouches > 1 || !this.props.zoomEnabled) {\n      return;\n    }\n\n    if (onDoubleTapBefore) {\n      onDoubleTapBefore(e, gestureState, this._getZoomableViewEventObject());\n    }\n\n    const nextZoomStep = this._getNextZoomStep();\n\n    // define new zoom position coordinates\n    const zoomPositionCoordinates = {\n      x: e.nativeEvent.locationX,\n      y: e.nativeEvent.locationY,\n    };\n\n    // if doubleTapZoomToCenter enabled -> always zoom to center instead\n    if (doubleTapZoomToCenter) {\n      zoomPositionCoordinates.x = 0;\n      zoomPositionCoordinates.y = 0;\n    }\n\n    this._zoomToLocation(zoomPositionCoordinates.x, zoomPositionCoordinates.y, nextZoomStep, true, () => {\n      if (onDoubleTapAfter) {\n        onDoubleTapAfter(\n          e,\n          gestureState,\n          this._getZoomableViewEventObject({\n            zoomLevel: nextZoomStep,\n          }),\n        );\n      }\n    });\n  }\n\n  /**\n   * Returns the next zoom step based on current step and zoomStep property.\n   * If we are zoomed all the way in -> return to initialzoom\n   *\n   * @returns {*}\n   */\n  _getNextZoomStep() {\n    const { zoomStep, maxZoom, initialZoom } = this.props;\n    const { zoomLevel } = this.state;\n\n    if (zoomLevel === maxZoom) {\n      return initialZoom;\n    }\n\n    let nextZoomStep = zoomLevel + zoomLevel * zoomStep;\n    if (maxZoom !== null && nextZoomStep > maxZoom) {\n      return maxZoom;\n    }\n\n    return nextZoomStep;\n  }\n\n  /**\n   * Converts touch events x and y coordinates into the context of our element center\n   *\n   * @param x\n   * @param y\n   * @returns {{x: number, y: number}}\n   *\n   * @private\n   */\n  _getOffsetAdjustedPosition(x: number, y: number) {\n    const { originalWidth, originalHeight } = this.state;\n\n    if (x === 0 && y === 0) {\n      return {\n        x: 0,\n        y: 0,\n      };\n    }\n\n    const returnObj = {\n      x: -x + originalWidth / 2,\n      y: -y + originalHeight / 2,\n    };\n\n    return returnObj;\n  }\n\n  /**\n   * Zooms to a specific location in our view\n   *\n   * @param x\n   * @param y\n   * @param newZoomLevel\n   * @param bindToBorders\n   * @param callbk\n   *\n   * @private\n   */\n  _zoomToLocation(x: number, y: number, newZoomLevel: number, bindToBorders = true, callbk = null) {\n    const offsetAdjustedPosition = this._getOffsetAdjustedPosition(x, y);\n\n    if (this.props.onZoomBefore) {\n      this.props.onZoomBefore(null, null, this._getZoomableViewEventObject());\n    }\n\n    // define the changeObject and make sure the offset values are bound to view\n    const changeStateObj = this._bindOffsetValuesToBorders(\n      {\n        zoomLevel: newZoomLevel,\n        offsetX: offsetAdjustedPosition.x,\n        offsetY: offsetAdjustedPosition.y,\n        lastZoomLevel: newZoomLevel,\n        lastX: offsetAdjustedPosition.x,\n        lastY: offsetAdjustedPosition.y,\n      },\n      bindToBorders,\n    );\n\n    this.setState(changeStateObj, () => {\n      if (callbk) {\n        callbk();\n      }\n\n      if (this.props.onZoomAfter) {\n        this.props.onZoomAfter(null, null, this._getZoomableViewEventObject());\n      }\n    });\n  }\n\n  /**\n   * Zooms to a specificied zoom level.\n   * Returns a promise if everything was updated and a boolean, whether it could be updated or if it exceeded the min/max zoom limits.\n   *\n   * @param {number} newZoomLevel\n   * @param {bool} bindToBorders\n   *\n   * @return {Promise<bool>}\n   */\n  zoomTo(newZoomLevel: number, bindToBorders = true): Promise<boolean> {\n    return new Promise((resolve) => {\n      // if we would go out of our min/max limits -> abort\n      if (newZoomLevel >= this.props.maxZoom || newZoomLevel <= this.props.minZoom) {\n        resolve(false);\n        return;\n      }\n\n      this._zoomToLocation(0, 0, newZoomLevel, bindToBorders, () => {\n        resolve(true);\n      });\n    });\n  }\n\n  /**\n   * Zooms in or out by a specificied change level\n   * Use a positive number for `zoomLevelChange` to zoom in\n   * Use a negative number for `zoomLevelChange` to zoom out\n   *\n   * Returns a promise if everything was updated and a boolean, whether it could be updated or if it exceeded the min/max zoom limits.\n   *\n   * @param {number} newZoomLevel\n   * @param {bool} bindToBorders\n   *\n   * @return {Promise<bool>}\n   */\n  zoomBy(zoomLevelChange: number = null, bindToBorders = true): Promise<boolean> {\n    // if no zoom level Change given -> just use zoom step\n    if (!zoomLevelChange) {\n      zoomLevelChange = this.props.zoomStep;\n    }\n\n    return this.zoomTo(this.state.zoomLevel + zoomLevelChange, bindToBorders);\n  }\n\n  /**\n   * Moves the zoomed view to a specified position\n   * Returns a promise when finished\n   *\n   * @param {number} newOffsetX the new position we want to move it to (x-axis)\n   * @param {number} newOffsetY the new position we want to move it to (y-axis)\n   * @param {bool} bindToBorders\n   *\n   * @return {Promise<bool>}\n   */\n  moveTo(newOffsetX: number, newOffsetY: number, bindToBorders = true): Promise<void> {\n    const { zoomLevel, originalWidth, originalHeight } = this.state;\n\n    let offsetX = (newOffsetX - originalWidth / 2) / zoomLevel;\n    let offsetY = (newOffsetY - originalHeight / 2) / zoomLevel;\n\n    return new Promise((resolve) => {\n      this._setNewOffsetPosition(-offsetX, -offsetY, bindToBorders, true, () => {\n        resolve();\n      });\n    });\n  }\n\n  /**\n   * Moves the zoomed view by a certain amount.\n   *\n   * Returns a promise when finished\n   *\n   * @param {number} offsetChangeX the amount we want to move the offset by (x-axis)\n   * @param {number} offsetChangeXY the amount we want to move the offset by (y-axis)\n   * @param {bool} bindToBorders\n   *\n   * @return {Promise<bool>}\n   */\n  moveBy(offsetChangeX: number, offsetChangeY: number, bindToBorders = true): Promise<void> {\n    const { zoomLevel, lastX, lastY } = this.state;\n\n    let offsetX = lastX - offsetChangeX / zoomLevel;\n    let offsetY = lastY - offsetChangeY / zoomLevel;\n\n    return new Promise((resolve) => {\n      this._setNewOffsetPosition(offsetX, offsetY, bindToBorders, true, () => {\n        resolve();\n      });\n    });\n  }\n\n  render() {\n    return (\n      <View style={styles.container} {...this.gestureHandlers.panHandlers} onLayout={this._getBoxDimensions}>\n        <View\n          style={[\n            styles.wrapper,\n            this.props.style,\n            {\n              transform: [\n                { scale: this.state.zoomLevel },\n                { scale: this.state.zoomLevel },\n                { translateX: this.state.offsetX },\n                { translateY: this.state.offsetY },\n              ],\n            },\n          ]}\n        >\n          {this.props.children}\n        </View>\n      </View>\n    );\n  }\n}\n/*\nTODO: delete them if not needed anymore\n\nReactNativeZoomableView.propTypes = {\n    ...View.propTypes,\n    zoomEnabled: PropTypes.bool,\n    initialZoom: PropTypes.number,\n    initialOffsetX: PropTypes.number,\n    initialOffsetY: PropTypes.number,\n    maxZoom: PropTypes.number,\n    minZoom: PropTypes.number,\n    pinchToZoomInSensitivity: PropTypes.number, // the level of resistance (sensitivity) to zoom in (0 - 10) - higher is less sensitive - default: 3\n    pinchToZoomOutSensitivity: PropTypes.number, // the level of resistance (sensitivity) to zoom out (0 - 10) - higher is less sensitive default: 1\n    zoomCenteringLevelDistance: PropTypes.number, // the (zoom level - 0 - maxZoom) distance for pinch to zoom actions until they are shifted on new pinch to zoom center - higher means it centeres slower - default 0.5\n    movementSensibility: PropTypes.number, // how resistant should shifting the view around be? (0.5 - 5) - higher is less sensitive - default: 1.9\n    doubleTapDelay: PropTypes.number, // how much delay will still be recognized as double press\n    bindToBorders: PropTypes.bool, // makes sure that the object stays within box borders\n    zoomStep: PropTypes.number, // how much zoom should be applied on double tap\n    onZoomBefore: PropTypes.func, // triggered before pinch movement\n    onZoomAfter: PropTypes.func, // triggered after pinch movement\n    onZoomEnd: PropTypes.func, // triggered after pinch movement ended\n    onDoubleTapBefore: PropTypes.func,\n    onDoubleTapAfter: PropTypes.func,\n    onShiftingBefore: PropTypes.func, // triggered before shift movement\n    onShiftingAfter: PropTypes.func, // triggered after shift movement\n    onShiftingEnd: PropTypes.func, // triggered after shift movement ended\n    onStartShouldSetPanResponder: PropTypes.func,\n    onMoveShouldSetPanResponder: PropTypes.func,\n    onPanResponderGrant: PropTypes.func,\n    onPanResponderEnd: PropTypes.func,\n    onPanResponderMove: PropTypes.func,\n    onLongPress: PropTypes.func,\n    longPressDuration: PropTypes.number\n};\n\nReactNativeZoomableView.defaultProps = {\n    zoomEnabled: true,\n    initialZoom: 1,\n    initialOffsetX: 0,\n    initialOffsetY: 0,\n    maxZoom: 1.5,\n    minZoom: 0.5,\n    pinchToZoomInSensitivity: 3,\n    pinchToZoomOutSensitivity: 1,\n    zoomCenteringLevelDistance: 0.5,\n    movementSensibility: 1.9,\n    doubleTapDelay: 300,\n    bindToBorders: true,\n    zoomStep: 0.5,\n    onLongPress: null,\n    longPressDuration: 700,\n    captureEvent: false,\n}; */\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    flex: 1,\n    width: '100%',\n    justifyContent: 'center',\n  },\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    position: 'relative',\n  },\n});\n\nexport default ReactNativeZoomableView;\n","import {\n  ReactNativeZoomableViewState,\n  ReactNativeZoomableViewWithGesturesProps,\n} from '@dudigital/react-native-zoomable-view';\nimport React from 'react';\nimport ReactNativeZoomableView from './ReactNativeZoomableView';\n\nexport const swipeDirections = {\n  SWIPE_UP: 'SWIPE_UP',\n  SWIPE_DOWN: 'SWIPE_DOWN',\n  SWIPE_LEFT: 'SWIPE_LEFT',\n  SWIPE_RIGHT: 'SWIPE_RIGHT',\n};\n\nclass ReactNativeZoomableViewWithGestures extends React.Component<\n  ReactNativeZoomableViewWithGesturesProps,\n  ReactNativeZoomableViewState\n> {\n  _onShiftingEnd = (e, gestureState, zoomableViewState) => {\n    if (this.props.onShiftingEnd) {\n      this.props.onShiftingEnd(e, gestureState, zoomableViewState);\n    }\n\n    if (!this._couldCallSwipeEvent(zoomableViewState)) {\n      return;\n    }\n\n    const swipeDirection = this._getSwipeDirection(gestureState);\n    this._triggerSwipeHandlers(swipeDirection, gestureState);\n  };\n\n  /**\n   * Checks if current config options make it possible to process a swipe or if is not necessary\n   *\n   * @returns {*}\n   * @private\n   */\n  _couldCallSwipeEvent(zoomableViewState) {\n    const { onSwipe, onSwipeUp, onSwipeDown, onSwipeLeft, onSwipeRight, swipeMaxZoom, swipeMinZoom } = this.props;\n\n    if (swipeMaxZoom && zoomableViewState.zoomLevel > swipeMaxZoom) {\n      return false;\n    }\n\n    if (swipeMinZoom && zoomableViewState.zoomLevel < swipeMinZoom) {\n      return false;\n    }\n\n    return onSwipe && onSwipeUp && onSwipeDown && onSwipeLeft && onSwipeRight;\n  }\n\n  /**\n   * Checks the swipe and validates whether we should process it or not\n   *\n   * @param gestureState\n   * @returns {*|boolean}\n   *\n   * @private\n   */\n  _validateSwipe(gestureState) {\n    const { onSwipeUp, onSwipeDown, onSwipeLeft, onSwipeRight } = this.props;\n    const swipeDirection = this._getSwipeDirection(gestureState);\n    const { SWIPE_LEFT, SWIPE_RIGHT, SWIPE_UP, SWIPE_DOWN } = swipeDirections;\n\n    return (\n      (onSwipeUp && swipeDirection === SWIPE_UP) ||\n      (onSwipeDown && swipeDirection === SWIPE_DOWN) ||\n      (onSwipeLeft && swipeDirection === SWIPE_LEFT) ||\n      (onSwipeRight && swipeDirection === SWIPE_RIGHT)\n    );\n  }\n\n  /**\n   * Triggers the correct directional callback\n   *\n   * @param swipeDirection\n   * @param gestureState\n   * @private\n   */\n  _triggerSwipeHandlers(swipeDirection, gestureState) {\n    const { onSwipe, onSwipeUp, onSwipeDown, onSwipeLeft, onSwipeRight } = this.props;\n    const { SWIPE_LEFT, SWIPE_RIGHT, SWIPE_UP, SWIPE_DOWN } = swipeDirections;\n\n    // trigger the general onswipe callback\n    if (onSwipe) {\n      onSwipe(swipeDirection, gestureState);\n    }\n\n    // trigger the direction specific swipe callback\n    switch (swipeDirection) {\n      case SWIPE_LEFT:\n        onSwipeLeft && onSwipeLeft(gestureState);\n        break;\n      case SWIPE_RIGHT:\n        onSwipeRight && onSwipeRight(gestureState);\n        break;\n      case SWIPE_UP:\n        onSwipeUp && onSwipeUp(gestureState);\n        break;\n      case SWIPE_DOWN:\n        onSwipeDown && onSwipeDown(gestureState);\n        break;\n    }\n  }\n\n  /**\n   * Calculates what direction the user swiped\n   *\n   * @param gestureState\n   * @returns {*}\n   * @private\n   */\n  _getSwipeDirection(gestureState) {\n    const { swipeLengthThreshold } = this.props;\n    const { SWIPE_LEFT, SWIPE_RIGHT, SWIPE_UP, SWIPE_DOWN } = swipeDirections;\n    const { dx, dy } = gestureState;\n\n    if (!swipeLengthThreshold) {\n      return;\n    }\n\n    if (this._isValidHorizontalSwipe(gestureState)) {\n      if (Math.abs(dx) > swipeLengthThreshold) {\n        return dx > 0 ? SWIPE_RIGHT : SWIPE_LEFT;\n      }\n    } else if (this._isValidVerticalSwipe(gestureState)) {\n      if (Math.abs(dy) > swipeLengthThreshold) {\n        return dy > 0 ? SWIPE_DOWN : SWIPE_UP;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Checks, whether the swipe was done in a horizontal fashion, respecting swipeVelocityThreshold limits\n   *\n   * @param gestureState\n   * @returns {*}\n   *\n   * @private\n   */\n  _isValidHorizontalSwipe(gestureState) {\n    const { vx, dy } = gestureState;\n    const { swipeVelocityThreshold, swipeDirectionalThreshold } = this.props;\n    return this._isValidSwipe(vx, swipeVelocityThreshold, dy, swipeDirectionalThreshold);\n  }\n\n  /**\n   * Checks, whether the swipe was done in a vertical fashion, respecting swipeVelocityThreshold limits\n   *\n   * @param gestureState\n   * @returns {*}\n   *\n   * @private\n   */\n  _isValidVerticalSwipe(gestureState) {\n    const { vy, dx } = gestureState;\n    const { swipeVelocityThreshold, swipeDirectionalThreshold } = this.props;\n    return this._isValidSwipe(vy, swipeVelocityThreshold, dx, swipeDirectionalThreshold);\n  }\n\n  /**\n   * Checks the sipw against velocity and directional offset to make sure it only gets activated, when we actually need it\n   *\n   * @param velocity\n   * @param swipeVelocityThreshold\n   * @param directionalOffset\n   * @param swipeDirectionalThreshold\n   *\n   * @returns {boolean}\n   *\n   * @private\n   */\n  _isValidSwipe(velocity, swipeVelocityThreshold, directionalOffset, swipeDirectionalThreshold) {\n    return Math.abs(velocity) > swipeVelocityThreshold && Math.abs(directionalOffset) < swipeDirectionalThreshold;\n  }\n\n  render() {\n    return <ReactNativeZoomableView {...this.props} onShiftingEnd={this._onShiftingEnd} />;\n  }\n}\n/* \nTODO: Remove this when typescript is proven to work\nReactNativeZoomableViewWithGestures.propTypes = {\n  swipeLengthThreshold: PropTypes.number,\n  swipeVelocityThreshold: PropTypes.number,\n  swipeDirectionalThreshold: PropTypes.number,\n  swipeMinZoom: PropTypes.number,\n  swipeMaxZoom: PropTypes.number,\n  swipeDisabled: PropTypes.bool,\n  onSwipe: PropTypes.func,\n  onSwipeUp: PropTypes.func,\n  onSwipeDown: PropTypes.func,\n  onSwipeLeft: PropTypes.func,\n  onSwipeRight: PropTypes.func,\n};\n\nReactNativeZoomableViewWithGestures.defaultProps = {\n  swipeLengthThreshold: 0,\n  swipeVelocityThreshold: 0.1,\n  swipeDirectionalThreshold: 120,\n  swipeMinZoom: null,\n  swipeMaxZoom: null,\n  swipeDisabled: false,\n  onSwipe: null,\n  onSwipeUp: null,\n  onSwipeDown: null,\n  onSwipeLeft: null,\n  onSwipeRight: null,\n};\n */\nexport default ReactNativeZoomableViewWithGestures;\n"],"names":["PanResponder","React","View","Component","StyleSheet"],"mappings":"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"}